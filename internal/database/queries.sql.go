// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, phone_number)
VALUES ($1, $2)
RETURNING id, name, phone_number, otp, otp_expiration_time
`

type CreateUserParams struct {
	Name        string `json:"name"`
	PhoneNumber string `json:"phone_number"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.PhoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.Otp,
		&i.OtpExpirationTime,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, name, phone_number, otp, otp_expiration_time
FROM users
WHERE phone_number = $1
LIMIT 1
`

func (q *Queries) GetUserByPhone(ctx context.Context, phoneNumber string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByPhone, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.Otp,
		&i.OtpExpirationTime,
	)
	return i, err
}

const updateUserOTP = `-- name: UpdateUserOTP :one
UPDATE users
SET otp = $2,
    otp_expiration_time  = $3
WHERE phone_number = $1
RETURNING id, name, phone_number, otp, otp_expiration_time
`

type UpdateUserOTPParams struct {
	PhoneNumber       string           `json:"phone_number"`
	Otp               pgtype.Text      `json:"otp"`
	OtpExpirationTime pgtype.Timestamp `json:"otp_expiration_time"`
}

func (q *Queries) UpdateUserOTP(ctx context.Context, arg UpdateUserOTPParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserOTP, arg.PhoneNumber, arg.Otp, arg.OtpExpirationTime)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.Otp,
		&i.OtpExpirationTime,
	)
	return i, err
}
